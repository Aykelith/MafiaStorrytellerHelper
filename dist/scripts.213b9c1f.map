{"version":3,"sources":["scripts/index.js"],"names":["GAME_STEP","WELCOME","GAME_SETUP","PLAYERS_SETUP","NIGHT","GENERATOR","PLAYER_ROLES","Mafia","text","id","Godfather","Serialkiller","Veteran","Vigilante","Policeman","Doctor","Mayor","Clown","Citizen","roleIsInnocent","role","NIGHT_ROUND","Police","Town","_toText","round","_toText2","_toRoundText","_roleIsForThisRound","ROUND_ACTION","SAVED_BY_DOCTOR","KILLED_IN_NIGHT","LYNCHED","SELF_DEFENCE","GUILTY","INNOCENT","NOTHING","DEFAULT_ROUNDS_ORDER","DEFAULT_PLAYER","name","alive","DEFAULT_GAME_SETTINGS","createHashFromPlayers","players","hash","i","length","WelcomePage","React","Component","props","parent","state","gameStep","setState","GameSetupPage","nightOrder","map","PlayersSetupPage","window","debugMode","timesUsedBullet","timesSavedHimself","e","target","select","value","parseInt","Object","assign","player","index","keys","console","log","NightPage","calculateNight","bind","renderPlayer","renderDay","renderNight","renderSelectable","renderVeteran","wasProtectedByDoctor","wasSelfDefence","isGuilty","getRoleIndex","getNameIndex","getRoleAlive","countSpecial","resetBetweenRounds","prepareForNextNight","getResultMessage","createHash","night","doctorSelected","veteranSelected","includes","filter","special","count","selectedPlayer","auxSelected","auxUnique","auxActivated","veteranButton","vampireMode","nightCurrentState","nightCurrentOrderIndex","veteranKills","veteranUsedTheBullet","action","townSelected","mafiaSelected","push","serialkillerSelected","selectedPlayerRole","vigilanteSelected","clownSelected","policeSelected","policeVeteranSelected","police","doctorVeteranSelected","settings","onClick","className","result","message","__html","person","roundName","_result","dayNumber","index2","isNight","scrollTo","title","subtitle","sort","player1","player2","playersLength","currentRoundPlayers","lastNight","alert","undefined","GeneratorPage","MainPage","gameSettings","slice","packCompresser","JsonUrl","location","decompress","then","json","compress","output","displayBlock","ReactDOM","render","document","getElementById"],"mappings":"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","file":"scripts.213b9c1f.map","sourceRoot":"..","sourcesContent":["const GAME_STEP = {\n    WELCOME: 0,\n    GAME_SETUP: 2,\n    PLAYERS_SETUP: 3,\n    NIGHT: 4,\n\n    GENERATOR: 99\n}\n\nconst PLAYER_ROLES = {\n    Mafia: {\n        text: \"Mafiot\",\n        id: 0\n    },\n    Godfather: {\n        text: \"Godfather\",\n        id: 1\n    },\n    Serialkiller: {\n        text: \"Serial killer\",\n        id: 2\n    },\n    Veteran: {\n        text: \"Veteran\",\n        id: 3\n    },\n    Vigilante: {\n        text: \"Vigilentul\",\n        id: 4\n    },\n    Policeman: {\n        text: \"Politist\",\n        id: 5\n    },\n    Doctor: {\n        text: \"Medic\",\n        id: 6\n    },\n    Mayor: {\n        text: \"Primar\",\n        id: 7\n    },\n    Clown: {\n        text: \"Mascarici\",\n        id: 8\n    },\n    Citizen: {\n        text: \"Cetatean\",\n        id: 9\n    }\n};\n\nfunction roleIsInnocent(role) {\n    return !(role == \"Mafia\" || role == \"Serialkiller\");\n}\n\nconst NIGHT_ROUND = {\n    Mafia: 0,\n    Serialkiller: 1,\n    Vigilante: 2,\n    Veteran: 3,\n    Police: 4,\n    Doctor: 5,\n    Clown: 6,\n    Town: 7,\n\n    _toText: (round) => {\n        switch (round) {\n            case NIGHT_ROUND.Mafia: return \"Mafia\";\n            case NIGHT_ROUND.Serialkiller: return \"Serialkillerului\";\n            case NIGHT_ROUND.Vigilante: return \"Vigilentului\";\n            case NIGHT_ROUND.Veteran: return \"Veteranului\";\n            case NIGHT_ROUND.Police: return \"Politistii\";\n            case NIGHT_ROUND.Doctor: return \"Doctorii\";\n            case NIGHT_ROUND.Clown: return \"Mascariciului\";\n            case NIGHT_ROUND.Town: return \"Orasul\";\n        }\n\n        return \"Error\";\n    },\n\n    _toText2: (round) => {\n        switch (round) {\n            case NIGHT_ROUND.Mafia: return \"Mafia\";\n            case NIGHT_ROUND.Serialkiller: return \"Serialkillerul\";\n            case NIGHT_ROUND.Vigilante: return \"Vigilentul\";\n            case NIGHT_ROUND.Veteran: return \"Veteranul\";\n            case NIGHT_ROUND.Police: return \"Politistii\";\n            case NIGHT_ROUND.Doctor: return \"Doctorii\";\n            case NIGHT_ROUND.Clown: return \"Mascariciul\";\n            case NIGHT_ROUND.Town: return \"Orasul\";\n        }\n\n        return \"Error\";\n    },\n\n    _toRoundText: (round) => {\n        switch (round) {\n            case NIGHT_ROUND.Mafia: return \"Runda mafiotilor\";\n            case NIGHT_ROUND.Serialkiller: return \"Runda serialkillerului\";\n            case NIGHT_ROUND.Vigilante: return \"Runda vigilentului\";\n            case NIGHT_ROUND.Veteran: return \"Runda veteranului\";\n            case NIGHT_ROUND.Police: return \"Runda politistilor\";\n            case NIGHT_ROUND.Doctor: return \"Runda doctorilor\";\n            case NIGHT_ROUND.Clown: return \"Runda mascariciului\";\n        }\n\n        return \"Error\";\n    },\n\n    _roleIsForThisRound: (round, role) => {\n        switch (round) {\n            case NIGHT_ROUND.Mafia: return role == \"Mafia\" || role == \"Godfather\";\n            case NIGHT_ROUND.Serialkiller: return role == \"Serialkiller\";\n            case NIGHT_ROUND.Vigilante: return role == \"Vigilante\";\n            case NIGHT_ROUND.Veteran: return role == \"Veteran\";\n            case NIGHT_ROUND.Police: return role == \"Policeman\";\n            case NIGHT_ROUND.Doctor: return role == \"Doctor\";\n            case NIGHT_ROUND.Clown: return role == \"Clown\";\n        }\n\n        return false;\n    }\n};\n\nconst ROUND_ACTION = {\n    SAVED_BY_DOCTOR: 0,\n    KILLED_IN_NIGHT: 1,\n    LYNCHED: 2,\n    SELF_DEFENCE: 3,\n    GUILTY: 4,\n    INNOCENT: 5,\n    NOTHING: 6\n}\n\nconst DEFAULT_ROUNDS_ORDER = [ \n    NIGHT_ROUND.Mafia, \n    NIGHT_ROUND.Serialkiller, \n    NIGHT_ROUND.Police, \n    NIGHT_ROUND.Vigilante,\n    NIGHT_ROUND.Doctor,\n    NIGHT_ROUND.Veteran\n];\n\nconst DEFAULT_PLAYER = {\n    name: \"\",\n    role: \"Citizen\",\n    alive: true\n};\n\nconst DEFAULT_GAME_SETTINGS = {\n\n};\n\nfunction createHashFromPlayers(players) {\n    let hash = \"\";\n    for (let i=0, length=players.length; i < length; ++i) {\n        hash += players[i].name + \"|\" + PLAYER_ROLES[players[i].role].id + \"|\" + (players[i].alive ? \"1\" : \"0\") + \"&\";\n    }\n\n    return hash;\n}\n\nclass WelcomePage extends React.Component {\n    render() {\n        return (\n            <div id=\"welcomePage\" className=\"main\">\n                <h1>Mafia Storyteller Helper</h1>\n                <h2>Created by Aykelith@NiAl</h2>\n                <button \n                    id=\"startBtn\"\n                    onClick={() => {\n                        this.props.parent.state.gameStep = GAME_STEP.GAME_SETUP;\n                        this.props.parent.setState(this.props.parent.state);\n                    }}\n                >\n                    Start\n                </button>\n                <button\n                    id=\"generatorBtn\"\n                    onClick={() => {\n\n                    }}\n                >\n                    Generator\n                </button>\n                <div id=\"browserStackCnt\">With the support of:<br/><a href=\"https://www.browserstack.com/\" rel=\"noopener noreferrer\" target=\"_blank\"><img src=\"imgs/Browserstack-logo.svg\"/></a></div>\n            </div>\n        );\n    }\n};\n\nclass GameSetupPage extends React.Component {\n    render() {\n        return (\n            <div id=\"gameSetupPage\" className=\"main\">\n                <h2>Game Setup</h2>\n                <div className=\"block\">\n                    <div>Ordinea noptilor:</div>\n                    <div id=\"nightsOrderCnt\">\n                        {\n                            this.props.parent.state.nightOrder.map(round => {\n                                return (\n                                    <div key={`round${round}`}>\n                                        <span>{NIGHT_ROUND._toText2(round)}</span>\n                                        <div>\n                                            \n                                        </div>\n                                    </div>\n                                )\n                            })\n                        }\n                    </div>\n                </div>\n                <button\n                    onClick={() => {\n                        this.props.parent.state.gameStep = GAME_STEP.PLAYERS_SETUP;\n                        this.props.parent.setState(this.props.parent.state);\n                    }}\n                >\n                    Urmatorul\n                </button>\n            </div>\n        )\n    }\n}\n\nclass PlayersSetupPage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        if (window.debugMode) {\n            this.props.parent.state.players = [\n                { name: \"Mafia 1\", role: \"Mafia\", alive: true },\n                { name: \"Mafia 2\", role: \"Mafia\", alive: true },\n                { name: \"Godfather\", role: \"Godfather\", alive: true },\n                { name: \"Policeman\", role: \"Policeman\", alive: true },\n                { name: \"Policeman 2\", role: \"Policeman\", alive: true },\n                { name: \"Veteran\", role: \"Veteran\", alive: true, timesUsedBullet: 0 },\n                { name: \"Vigilante\", role: \"Vigilante\", alive: true },\n                { name: \"Doctor\", role: \"Doctor\", alive: true, timesSavedHimself: 0 },\n                { name: \"Mayor\", role: \"Mayor\", alive: true },\n                { name: \"Clown\", role: \"Clown\", alive: true },\n                { name: \"Serialkiller\", role: \"Serialkiller\", alive: true }\n            ]\n        }\n    }\n    \n    render() {\n        return (\n            <div id=\"playersSetupPage\" className=\"main\">\n                <h2>Players setup</h2>\n                <div>\n                    <span>Numarul de jucatori: </span>\n                    <input\n                        type=\"number\"\n                        value={this.props.parent.state.players.length}\n                        onClick={e => e.target.select()}\n                        onChange={e => {\n                            const value = parseInt(e.target.value);\n\n                            if (value == 0) {\n                                this.props.parent.state.players = [];\n                                return;\n                            }\n\n                            this.props.parent.state.players.length = value;\n\n                            for (let i=0, length = this.props.parent.state.players.length; i < length; ++i) {\n                                if (!this.props.parent.state.players[i]) {\n                                    this.props.parent.state.players[i] = Object.assign({}, DEFAULT_PLAYER);\n                                }\n                            }\n\n                            this.props.parent.setState(this.props.parent.state);\n                        }}\n                    />\n                </div>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Nr</th>\n                            <th>Nume</th>\n                            <th>Rol</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.props.parent.state.players.map((player, index) => {\n                                return (\n                                    <tr key={`player${index}`}>\n                                        <td>{index}</td>\n                                        <td>\n                                            <input\n                                                type=\"text\"\n                                                value={player.name}\n                                                onChange={e => {\n                                                    this.props.parent.state.players[index].name = e.target.value;\n                                                    this.props.parent.setState(this.props.parent.state);\n                                                }}\n                                            />\n                                        </td>\n                                        <td>\n                                            <select\n                                                value={player.role}\n                                                onChange={e => {\n                                                    this.props.parent.state.players[index].role = e.target.value;\n\n                                                    if (e.target.value == \"Doctor\") {\n                                                        this.props.parent.state.players[index].timesSavedHimself = 0;\n                                                    }\n\n                                                    if (e.target.value == \"Veteran\") {\n                                                        this.props.parent.state.players[index].timesUsedBullet = 0;\n                                                    }\n\n                                                    this.props.parent.setState(this.props.parent.state);\n                                                }}\n                                            >\n                                                {\n                                                    Object.keys(PLAYER_ROLES).map(role => {\n                                                        return <option key={role} value={role}>{PLAYER_ROLES[role].text}</option>;\n                                                    })\n                                                }\n                                            </select>\n                                        </td>\n                                        <td></td>\n                                    </tr>\n                                );\n                            })\n                        }\n                    </tbody>\n                </table>\n                <button\n                    onClick={() => {\n                        this.props.parent.state.gameStep = GAME_STEP.NIGHT;\n                        console.log(this.props.parent.state.players);\n                        this.props.parent.setState(this.props.parent.state);\n                    }}\n                >\n                    Incepe jocul\n                </button>\n            </div>\n        )\n    }\n}\n\nclass NightPage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n\n        this.calculateNight = this.calculateNight.bind(this);\n\n        this.renderPlayer = this.renderPlayer.bind(this);\n\n        this.renderDay = this.renderDay.bind(this);\n        this.renderNight = this.renderNight.bind(this);\n\n        this.renderSelectable = this.renderSelectable.bind(this);\n        this.renderVeteran = this.renderVeteran.bind(this);\n\n        this.wasProtectedByDoctor = this.wasProtectedByDoctor.bind(this);\n        this.wasSelfDefence = this.wasSelfDefence.bind(this);\n        this.isGuilty = this.isGuilty.bind(this);\n        this.getRoleIndex = this.getRoleIndex.bind(this);\n        this.getNameIndex = this.getNameIndex.bind(this);\n        this.getRoleAlive = this.getRoleAlive.bind(this);\n        this.countSpecial = this.countSpecial.bind(this);\n\n        this.resetBetweenRounds = this.resetBetweenRounds.bind(this);\n        this.prepareForNextNight = this.prepareForNextNight.bind(this);\n        \n        this.getResultMessage = this.getResultMessage.bind(this);\n    }\n\n    componentDidMount() {\n        this.props.parent.createHash();\n    }\n\n    wasProtectedByDoctor(index) { return this.props.parent.state.night.doctorSelected == index; }\n    wasSelfDefence(index) { return this.props.parent.state.night.veteranSelected == index };\n    isGuilty(index) { return ['Mafia', 'Serialkiller'].includes(this.props.parent.state.players[index].role); }\n    getRoleIndex(role) { \n        for (let i=0, length=this.props.parent.state.players.length; i < length; ++i) {\n            if (this.props.parent.state.players[i].role == role && this.props.parent.state.players[i].alive) return i;\n        } \n\n        return null;\n    }\n    getRoleAlive(role) {\n        return this.props.parent.state.players\n            .filter(player => NIGHT_ROUND._roleIsForThisRound(role, player.role) && player.alive);\n    }\n    getNameIndex(name) {\n        for (let i=0, length=this.props.parent.state.players.length; i < length; ++i) {\n            if (this.props.parent.state.players[i].name == name) return i;\n        } \n\n        return null;\n    }\n    countSpecial(special) {\n        let count = 0;\n        for (let i=0, length=this.props.parent.state.players.length; i < length; ++i) {\n            if (this.props.parent.state.players[i][special]) count += this.props.parent.state.players[i][special];\n        } \n\n        return count;\n    }\n\n    resetBetweenRounds() {\n        this.state.selectedPlayer = null;\n        this.state.auxSelected = null;\n        this.state.auxUnique = false;\n        this.state.auxActivated = false;\n        this.state.veteranButton = null;\n    }\n\n    prepareForNextNight(vampireMode) {\n        this.props.parent.state.nightCurrentState = vampireMode ? NIGHT_ROUND.Clown : this.props.parent.state.nightOrder[this.props.parent.state.nightCurrentOrderIndex];\n\n        if (this.props.parent.state.nightCurrentState == NIGHT_ROUND.Doctor) {\n            this.state.auxActivated = true;\n            this.state.auxUnique = true;\n        }\n    }\n\n    calculateNight() {\n        let night = this.props.parent.state.night;\n        night.veteranKills = [];\n\n        let veteranUsedTheBullet = false;\n\n        console.log(\"NIGHT\", night);\n\n        if (night.townSelected != null) {\n            console.log(\"TOWN\", night.townSelected, this.props.parent.state.players[night.townSelected]);\n            night.townSelected = { id: night.townSelected, action: ROUND_ACTION.KILLED_IN_NIGHT };\n        }\n\n        if (night.mafiaSelected != null) {\n            console.log(\"MAFIA\", night.mafiaSelected, this.props.parent.state.players[night.mafiaSelected]);\n            let action;\n            if (this.wasSelfDefence(night.mafiaSelected)) {\n                console.log(\"   \", \"WAS SELF DEFENCE\", veteranUsedTheBullet);\n                if (!veteranUsedTheBullet) {\n                    ++this.props.parent.state.players[night.mafiaSelected].timesUsedBullet;\n                    veteranUsedTheBullet = true;\n                }\n\n                let id = this.getRoleIndex('Godfather');\n                night.veteranKills.push(id);\n\n                this.props.parent.state.players[id].alive = false;\n\n                action = ROUND_ACTION.SELF_DEFENCE;\n            } else if (this.wasProtectedByDoctor(night.mafiaSelected)) {\n                console.log(\"   \", \"WAS PROTECTED BY DOCTOR\");\n                action = ROUND_ACTION.SAVED_BY_DOCTOR;\n            } else {\n                let selectedPlayerRole = this.props.parent.state.players[night.mafiaSelected].role;\n\n                if (selectedPlayerRole == \"Serialkiller\") {\n                    action = ROUND_ACTION.NOTHING;\n                } else {\n                    this.props.parent.state.players[night.mafiaSelected].alive = false;\n                    action = ROUND_ACTION.KILLED_IN_NIGHT;\n                }\n            }\n\n            night.mafiaSelected = { id: night.mafiaSelected, action: action };\n        }\n        \n        if (night.serialkillerSelected != null) {\n            console.log(\"SERIALKILLER\", night.serialkillerSelected, this.props.parent.state.players[night.serialkillerSelected]);\n\n            let action;\n            if (this.wasSelfDefence(night.serialkillerSelected)) {\n                console.log(\"   \", \"WAS SELF DEFENCE\", veteranUsedTheBullet);\n                if (!veteranUsedTheBullet) {\n                    ++this.props.parent.state.players[night.serialkillerSelected].timesUsedBullet;\n                    veteranUsedTheBullet = true;\n                }\n\n                let id = this.getRoleIndex('Serialkiller');\n                night.veteranKills.push(id);\n\n                this.props.parent.state.players[id].alive = false;\n\n                action = ROUND_ACTION.SELF_DEFENCE;\n            } else if (this.wasProtectedByDoctor(night.serialkillerSelected)) {\n                console.log(\"   \", \"WAS PROTECTED BY DOCTOR\");\n                action = ROUND_ACTION.SAVED_BY_DOCTOR;\n            } else {\n                let selectedPlayerRole = this.props.parent.state.players[night.serialkillerSelected].role;\n\n                if (selectedPlayerRole == \"Mafia\" || selectedPlayerRole == \"Godfather\") {\n                    action = ROUND_ACTION.NOTHING;\n                } else {\n                    this.props.parent.state.players[night.serialkillerSelected].alive = false;\n                    action = ROUND_ACTION.KILLED_IN_NIGHT;\n                }\n            }\n\n            night.serialkillerSelected = { id: night.serialkillerSelected, action: action };\n        }\n        \n        if (night.vigilanteSelected != null) {\n            console.log(\"VIGILANTE\", night.vigilanteSelected, this.props.parent.state.players[night.vigilanteSelected]);\n\n            let action;\n            if (this.wasSelfDefence(night.vigilanteSelected)) {\n                console.log(\"   \", \"WAS SELF DEFENCE\", veteranUsedTheBullet);\n                if (!veteranUsedTheBullet) {\n                    ++this.props.parent.state.players[night.vigilanteSelected].timesUsedBullet;\n                    veteranUsedTheBullet = true;\n                }\n\n                let id = this.getRoleIndex('Vigilante');\n                night.veteranKills.push(id);\n\n                this.props.parent.state.players[id].alive = false;\n                \n                action = ROUND_ACTION.SELF_DEFENCE;\n            } else if (this.wasProtectedByDoctor(night.vigilanteSelected)) {\n                console.log(\"   \", \"WAS PROTECTED BY DOCTOR\");\n                action = ROUND_ACTION.SAVED_BY_DOCTOR;\n            } else {\n                this.props.parent.state.players[night.vigilanteSelected].alive = false;\n                action = ROUND_ACTION.KILLED_IN_NIGHT;\n            }\n\n            night.vigilanteSelected = { id: night.vigilanteSelected, action: action };\n        }\n\n        if (night.clownSelected != null) {\n            console.log(\"CLOWN POWER\");\n            night.clownSelected = { id: night.clownSelected, action: ROUND_ACTION.KILLED_IN_NIGHT };\n        }\n\n        if (night.policeSelected != null) {\n            console.log(\"POLICE\", night.policeSelected, this.props.parent.state.players[night.policeSelected]);\n\n            let action;\n            if (this.wasSelfDefence(night.policeSelected)) {\n                console.log(\"   \", \"WAS SELF DEFENCE\", veteranUsedTheBullet, night.policeVeteranSelected, this.props.parent.state.players[night.policeVeteranSelected]);\n                if (!veteranUsedTheBullet) {\n                    ++this.props.parent.state.players[night.policeSelected].timesUsedBullet;\n                    veteranUsedTheBullet = true;\n                }\n\n                this.props.parent.state.players[night.policeVeteranSelected].alive = false;\n                action = ROUND_ACTION.SELF_DEFENCE;\n            } else {\n                action = 999;\n            }\n\n            night.policeSelected = { id: night.policeSelected, police: this.isGuilty(night.policeSelected) ? ROUND_ACTION.GUILTY : ROUND_ACTION.INNOCENT, action: action };\n        }\n        \n        if (night.doctorSelected != null) {\n            console.log(\"DOCTOR\", night.doctorSelected, this.props.parent.state.players[night.doctorSelected]);\n            if (this.wasSelfDefence(night.doctorSelected)) {\n                if (!night.doctorVeteranSelected) night.doctorVeteranSelected = this.getRoleIndex(\"Doctor\");\n\n                console.log(\"   \", \"WAS SELF DEFENCE\", veteranUsedTheBullet, night.doctorVeteranSelected, this.props.parent.state.players[night.doctorVeteranSelected]);\n                if (!veteranUsedTheBullet) {\n                    ++this.props.parent.state.players[night.doctorSelected].timesUsedBullet;\n                    veteranUsedTheBullet = true;\n                }\n\n                this.props.parent.state.players[night.doctorVeteranSelected].alive = false;\n            } else if (this.props.parent.state.players[night.doctorSelected].role == \"Doctor\") {\n                ++this.props.parent.state.players[night.doctorSelected].timesSavedHimself;\n            }\n\n            night.doctorSelected = { id: night.doctorSelected };\n        }\n\n        if (night.veteranSelected != null && !veteranUsedTheBullet) {\n            ++this.props.parent.state.players[night.veteranSelected].timesUsedBullet;\n            veteranUsedTheBullet = true;\n        }\n    }\n\n    renderPlayer(player, settings) {\n        return (\n            <div onClick={settings.onClick} className={`${player.role} ${settings.className || \"\"}`}>\n                <div>{player.name} {window.debugMode && <span>({this.getNameIndex(player.name)})</span>}</div>\n                <div>{settings.role ? settings.role(player) : PLAYER_ROLES[player.role].text}</div>\n            </div>\n        )\n    }\n\n    getResultMessage(round, result, className) {\n        console.log(NIGHT_ROUND._toText(round), result);\n        if (result == null) {\n            if (round == NIGHT_ROUND.Town) {\n                return <div><span>Orasul a decis sa nu omoare pe nimeni</span></div>\n            }\n    \n            if (round == NIGHT_ROUND.Vigilante) {\n                return <div className={className}><span>Vigilentul a ales sa nu omoare</span></div>\n            }\n\n            if (round == NIGHT_ROUND.Veteran) {\n                return <div className={className}><span>Veteranul a ales sa nu-si foloseasca glontul</span></div>\n            }\n\n            return null;\n        }\n\n        if (round == NIGHT_ROUND.Veteran) {\n            let message = \"Veteranul si-a folosit glontul si-a omorat pe: \";\n\n            let count = this.props.parent.state.night.veteranKills.length;\n            for (let i=0, length=this.props.parent.state.night.veteranKills.length; i < length; ++i) {\n                message += `<b>${this.props.parent.state.players[this.props.parent.state.night.veteranKills[i]].name}(${PLAYER_ROLES[this.props.parent.state.players[this.props.parent.state.night.veteranKills[i]].role].text})</b>,`;\n            }\n\n            if (this.props.parent.state.night.policeVeteranSelected) {\n                ++count;\n                message += `<b>${this.props.parent.state.players[this.props.parent.state.night.policeVeteranSelected].name}(${PLAYER_ROLES[this.props.parent.state.players[this.props.parent.state.night.policeVeteranSelected].role].text})</b>,`;\n            }\n\n            if (this.props.parent.state.night.doctorVeteranSelected) {\n                ++count;\n                message += `<b>${this.props.parent.state.players[this.props.parent.state.night.doctorVeteranSelected].name}(${PLAYER_ROLES[this.props.parent.state.players[this.props.parent.state.night.doctorVeteranSelected].role].text})</b>,`;\n            }\n\n            return <div className={className}>{ count > 0 ? <span dangerouslySetInnerHTML={{ __html: message }}></span> : \"Veteranul si-a folosit glontul dar nu a omorat pe nimeni!\" }</div>;\n        }\n\n        if (round == NIGHT_ROUND.Doctor) {\n            let person = <b>{this.props.parent.state.players[result.id].name}({PLAYER_ROLES[this.props.parent.state.players[result.id].role].text})</b>;\n\n            for (let roundName in this.props.parent.state.night) {\n                let _result = this.props.parent.state.night[roundName];\n                if (typeof _result == 'object' && _result && _result.action == ROUND_ACTION.SAVED_BY_DOCTOR) {\n                    return <div className={className}><span>Doctorii au salvat pe cine trebuia! ({person})</span></div>;\n                }\n            }\n\n            return <div className={className}><span>Doctorii nu au salvat pe cine trebuia! ({person})</span></div>\n        }\n\n        if (round == NIGHT_ROUND.Police) {\n            return <div className={className}><span>Politistii au ales si a iesit {result.police == ROUND_ACTION.GUILTY ? \"necurat\" : \"curat\"} (<b>{this.props.parent.state.players[result.id].name}({PLAYER_ROLES[this.props.parent.state.players[result.id].role].text})</b>)</span></div>\n        }\n\n        if (result.action == ROUND_ACTION.KILLED_IN_NIGHT) {\n            return <div className={className}><span>{NIGHT_ROUND._toText2(round)} au omorat pe <b>{this.props.parent.state.players[result.id].name}({PLAYER_ROLES[this.props.parent.state.players[result.id].role].text})</b></span></div>;\n        } else if (result.action == ROUND_ACTION.SAVED_BY_DOCTOR || result.action == ROUND_ACTION.SELF_DEFENCE) {\n            return <div className={className}><span>{NIGHT_ROUND._toText2(round)} nu au reusit sa omoare pe nimeni (<b>{this.props.parent.state.players[result.id].name}({PLAYER_ROLES[this.props.parent.state.players[result.id].role].text})</b>)</span></div>;\n        }\n\n        if (result.action == ROUND_ACTION.NOTHING) {\n            return <div className={className}><span>{NIGHT_ROUND._toText2(round)} nu au omorat pe nimeni (<b>{this.props.parent.state.players[result.id].name}({PLAYER_ROLES[this.props.parent.state.players[result.id].role].text})</b>)</span></div>\n        }\n\n        return null;\n    }\n\n    renderDay() {\n        console.log(\"RRR\", this.props.parent.state.night);\n\n        return (\n            <div id=\"nightPage_day\" className=\"main\">\n                <h2 id=\"dayNumber\">Ziua {this.props.parent.state.dayNumber}</h2>\n                {\n                    this.props.parent.state.night\n                    &&\n                    <div className=\"playersStatusCnt\">\n                        <h3>Noaptea trecuta</h3>\n                        { this.getResultMessage(NIGHT_ROUND.Town, this.props.parent.state.night.townSelected) }\n                        { this.getResultMessage(NIGHT_ROUND.Mafia, this.props.parent.state.night.mafiaSelected, \"Mafia\") }\n                        { this.getResultMessage(NIGHT_ROUND.Serialkiller, this.props.parent.state.night.serialkillerSelected, \"Serialkiller\") }\n                        { this.getResultMessage(NIGHT_ROUND.Police, this.props.parent.state.night.policeSelected, \"Policeman\") }\n                        { this.getResultMessage(NIGHT_ROUND.Vigilante, this.props.parent.state.night.vigilanteSelected, \"Vigilante\") }\n                        { this.getResultMessage(NIGHT_ROUND.Doctor, this.props.parent.state.night.doctorSelected, \"Doctor\") }\n                        { this.getResultMessage(NIGHT_ROUND.Veteran, this.props.parent.state.night.veteranSelected, \"Veteran\") }\n                        { this.getResultMessage(NIGHT_ROUND.Clown, this.props.parent.state.night.clownSelected, \"Clown\") }\n                    </div>\n                }\n                <div className=\"playersStatusCnt\">\n                    <h3>Lista jucatori</h3>\n                    <h4>(selecteaza un jucator pentru a-l linsa)</h4>\n                    {\n                        this.props.parent.state.players\n                            .map((player, index) => {\n                            let index2 = this.getNameIndex(player.name);\n\n                            return this.renderPlayer(\n                                player, \n                                {\n                                    className: `${this.state.selectedPlayer == index2 ? \"selected\" : \"\"} ${!player.alive ? \"deleted\" : \"\"}`, \n                                    onClick: () => {\n                                        if (!player.alive) return;\n\n                                        this.state.selectedPlayer = this.state.selectedPlayer == index2 ? null : index2;\n                                        this.setState(this.state);\n                                    }\n                                }\n                            );\n                        })\n                    }\n                </div>\n                <button\n                    id=\"startNightBtn\"\n                    onClick={e => {\n                        this.props.parent.state.night = { townSelected: this.state.selectedPlayer }\n                        if (this.state.selectedPlayer) {\n                            this.props.parent.state.players[this.state.selectedPlayer].alive = false;\n\n                            if (this.props.parent.state.players[this.state.selectedPlayer].role == \"Clown\") {\n                                this.state.vampireMode = true;\n                            }\n                        }\n\n                        this.state.selectedPlayer = null;\n                        this.state.auxSelected = null;\n                        this.state.auxActivated = false;\n                        this.state.auxUnique = false;\n                        this.state.veteranButton = null;\n\n                        this.props.parent.state.isNight = true;\n                        ++this.props.parent.state.dayNumber;\n                        this.props.parent.state.nightCurrentState = this.props.parent.state.nightOrder[0];\n                        this.props.parent.state.nightCurrentOrderIndex = 0;\n\n                        if (this.getRoleIndex(\"Godfather\") == null) {\n                            this.state.auxActivated = true;\n                        }\n\n                        this.props.parent.setState(this.props.parent.state, () => { window.scrollTo(0,0); });\n\n                        console.log(\"PLAYERS\", this.props.parent.state.players);\n                    }}\n                >\n                    Incepe noaptea\n                </button>\n            </div>\n        )\n    }\n\n    renderSelectable(settings) {\n        console.log(\"SETTINGS\", settings);\n        return (\n            <div id=\"mafiaStep\" className=\"nightStep\">\n                <div className=\"playersStatusCnt\">\n                    <h3>{settings.title}</h3>\n                    <h4>{settings.subtitle}</h4>\n                    {\n                        this.props.parent.state.players\n                            .filter(player => !NIGHT_ROUND._roleIsForThisRound(this.props.parent.state.nightCurrentState, player.role) && player.alive)\n                            .sort(settings.filter ? settings.filter : (player1, player2) => player1.role > player2.role)\n                            .map((player, index) => {\n                            let index2 = this.getNameIndex(player.name);\n                            return this.renderPlayer(\n                                player, \n                                Object.assign(\n                                    {\n                                        className: settings.className ? \n                                            `${this.state.selectedPlayer == index2 ? \"selected\" : \"\"} ${settings.className(player, index2)}` : \n                                            this.state.selectedPlayer == index2 && \"selected\", \n                                        onClick: () => {\n                                            if (settings.playersLength == 0) return;\n\n                                            this.state.selectedPlayer = this.state.selectedPlayer == index2 ? null : index2;\n                                            if (this.state.auxUnique) this.state.auxSelected = null;\n                                            this.setState(this.state);\n                                        },\n                                    }, \n                                    settings.player || {}\n                                )\n                            );\n                        })\n                    }\n                </div>\n            </div>\n        )\n    }\n\n    renderVeteran() {\n        return (\n            <div id=\"veteranStep\" className=\"nightStep\">\n                <h3>Vrei sa folosesti glontul?</h3>\n                <div id=\"buttonsCnt\">\n                    <button \n                        className={this.state.veteranButton == 1 && 'selected'}\n                        onClick={() => {\n                            this.props.parent.state.night.veteranSelected = this.getRoleIndex('Veteran');\n                            this.state.veteranButton = 1;\n                            this.setState(this.state);\n                        }}\n                    >\n                        Da\n                    </button>\n                    <button \n                        className={this.state.veteranButton == 2 && 'selected'}\n                        onClick={() => {\n                            this.props.parent.state.night.veteranSelected = null;\n                            this.state.veteranButton = 2;\n                            this.setState(this.state);\n                        }}\n                    >\n                        Nu\n                    </button>\n                </div>\n                {\n                    this.props.parent.state.night.veteranSelected\n                    &&\n                    this.props.parent.state.night.policeSelected == this.props.parent.state.night.veteranSelected\n                    && \n                    this.getRoleAlive(NIGHT_ROUND.Police).length > 1\n                    &&\n                    <div className=\"playersStatusCnt\">\n                        <h3>Lista politisti</h3>\n                        <h4>(selecteaza un politist pentru a-l omori)</h4>\n                        {\n                            this.getRoleAlive(NIGHT_ROUND.Police).map((player, index) => {\n                                let index2 = this.getNameIndex(player.name);\n                                return this.renderPlayer(player, \n                                    {\n                                        className: this.props.parent.state.night.policeVeteranSelected == index2 && \"selected\", \n                                        onClick: () => {\n                                            this.props.parent.state.night.policeVeteranSelected = this.props.parent.state.night.policeVeteranSelected == index2 ? null : index2;\n                                            this.props.parent.setState(this.props.parent.state);\n                                        }\n                                    }\n                                );\n                            })\n                        }\n                    </div>\n                }\n                {\n                    this.props.parent.state.night.veteranSelected\n                    &&\n                    this.props.parent.state.night.doctorSelected == this.props.parent.state.night.veteranSelected\n                    && \n                    this.getRoleAlive(NIGHT_ROUND.Doctor).length > 1\n                    &&\n                    <div className=\"playersStatusCnt\">\n                        <h3>Lista doctori</h3>\n                        <h4>(selecteaza un doctor pentru a-l omori)</h4>\n                        {\n                            this.getRoleAlive(NIGHT_ROUND.Doctor).map((player, index) => {\n                                let index2 = this.getNameIndex(player.name);\n                                return this.renderPlayer(player, this.props.parent.state.night.doctorVeteranSelected == index2 && \"selected\", () => {\n                                    this.props.parent.state.night.doctorVeteranSelected = this.props.parent.state.night.doctorVeteranSelected == index2 ? null : index2;\n                                    this.props.parent.setState(this.props.parent.state);\n                                });\n                            })\n                        }\n                    </div>\n                }\n            </div>\n        )\n    }\n\n    renderNight() {\n        let currentRoundPlayers = this.props.parent.state.players\n            .filter(player => NIGHT_ROUND._roleIsForThisRound(this.props.parent.state.nightCurrentState, player.role) && player.alive)\n            .sort((player1, player2) => player1.role > player2.role);\n            \n        return (\n            <div id=\"nightPage_night\" className=\"main\">\n                <h1>{NIGHT_ROUND._toRoundText(this.props.parent.state.nightCurrentState)}</h1>\n                {\n                    this.props.parent.state.nightCurrentState == NIGHT_ROUND.Doctor\n                    &&\n                    <div className=\"specialCnt\">Medicii s-or salvat pe ei de {this.countSpecial(\"timesSavedHimself\")} ori</div>\n                }\n                {\n                    this.props.parent.state.nightCurrentState == NIGHT_ROUND.Veteran\n                    &&\n                    <div className=\"specialCnt\">Veteranul o folosit glontul de {this.countSpecial(\"timesUsedBullet\")} ori</div>\n                }\n                <div className=\"playersStatusCnt\">\n                    <h3>Lista jucatori</h3>\n                    {\n                        currentRoundPlayers.map((player, index) => {\n                            let index2 = this.getNameIndex(player.name);\n                            return this.renderPlayer(player, \n                                {\n                                    className: this.state.auxActivated && this.state.auxSelected == index2 && \"selected\", \n                                    onClick: () => {\n                                        this.state.auxSelected = this.state.auxSelected == index2 ? null : index2;\n                                        if (this.state.auxUnique) this.state.selectedPlayer = null;\n                                        this.setState(this.state);\n                                    }\n                                }\n                            );\n                        })\n                    }\n                </div>\n                {\n                    this.props.parent.state.nightCurrentState == NIGHT_ROUND.Mafia\n                    &&\n                    this.renderSelectable({ title: \"Posibile victime\", subtitle: \"(selecteaza o victima)\", playersLength: currentRoundPlayers.length })\n                }\n                {\n                    this.props.parent.state.nightCurrentState == NIGHT_ROUND.Serialkiller\n                    &&\n                    this.renderSelectable({ title: \"Posibile victime\", subtitle: \"(selecteaza o victima)\", playersLength: currentRoundPlayers.length })\n                }\n                {\n                    this.props.parent.state.nightCurrentState == NIGHT_ROUND.Police\n                    &&\n                    this.renderSelectable({ \n                        title: \"Posibili criminali\", \n                        subtitle: \"(selecteaza un jucator)\",\n                        filter: (player1, player2) => roleIsInnocent(player1.role) > roleIsInnocent(player2.role),\n                        className: (player, index) => roleIsInnocent(player.role) ? \"innocent\" : \"guilty\",\n                        player: {\n                            role: (player) => `${roleIsInnocent(player.role) ? \"Inocent\" : \"Vinovant\"} (${PLAYER_ROLES[player.role].text})`\n                        }, \n                        playersLength: currentRoundPlayers.length \n                    })\n                }\n                {\n                    this.props.parent.state.nightCurrentState == NIGHT_ROUND.Vigilante\n                    &&\n                    this.renderSelectable({ title: \"Posibile victime\", subtitle: \"(selecteaza o victima sau nu)\", playersLength: currentRoundPlayers.length })\n                }\n                {\n                    this.props.parent.state.nightCurrentState == NIGHT_ROUND.Doctor\n                    &&\n                    this.renderSelectable({ title: \"Posibile victime\", subtitle: \"(selecteaza o victima sau nu)\", playersLength: currentRoundPlayers.length })\n                }\n                {\n                    this.props.parent.state.nightCurrentState == NIGHT_ROUND.Veteran && currentRoundPlayers.length > 0\n                    &&\n                    this.renderVeteran()\n                }\n                {\n                    this.props.parent.state.nightCurrentState == NIGHT_ROUND.Clown\n                    &&\n                    this.renderSelectable({ title: \"Posibile victime\", subtitle: \"(selecteaza o victima)\", playersLength: 1 })\n                }\n                <div id=\"buttonsCnt\">\n                    <button\n                        id=\"backState\"\n                        onClick={() => {\n                            this.resetBetweenRounds();\n\n                            --this.props.parent.state.nightCurrentOrderIndex;\n                            if (this.props.parent.state.nightCurrentOrderIndex == -1) {\n                                this.props.parent.state.isNight = false;\n                                --this.props.parent.state.dayNumber;\n                                this.props.parent.state.night = Object.assign({}, this.props.parent.state.lastNight);\n                            } else {\n                                this.prepareForNextNight();\n                            }\n\n                            this.props.parent.setState(this.props.parent.state, () => { window.scrollTo(0,0); });\n                        }}\n                    >\n                        Inapoi\n                    </button>\n                    <button \n                        id=\"nextState\"\n                        onClick={() => {\n                            if (this.props.parent.state.nightCurrentState == NIGHT_ROUND.Mafia) {\n                                if (currentRoundPlayers.length > 0 && this.state.selectedPlayer == null) {\n                                    return alert(\"Selecteaza un jucator\");\n                                }\n\n                                if (currentRoundPlayers.length > 0 && this.getRoleIndex(\"Godfather\") == null) {\n                                    if (this.state.auxSelected == null) return alert(\"Selecteaza noul Godfather\");\n                                    else {\n                                        this.props.parent.state.players[this.state.auxSelected].role = \"Godfather\";\n                                    }\n                                }\n\n                                this.props.parent.state.night.mafiaSelected = this.state.selectedPlayer;\n                            } else if (this.props.parent.state.nightCurrentState == NIGHT_ROUND.Serialkiller) {\n                                if (currentRoundPlayers.length > 0 && this.state.selectedPlayer == null) {\n                                    return alert(\"Selecteaza un jucator\");\n                                }\n\n                                this.props.parent.state.night.serialkillerSelected = this.state.selectedPlayer;\n                            } else if (this.props.parent.state.nightCurrentState == NIGHT_ROUND.Police) {\n                                if (currentRoundPlayers.length > 0 && this.state.selectedPlayer == null) {\n                                    return alert(\"Selecteaza un jucator\");\n                                }\n\n                                this.props.parent.state.night.policeSelected = this.state.selectedPlayer;\n                            } else if (this.props.parent.state.nightCurrentState == NIGHT_ROUND.Vigilante) {\n                                this.props.parent.state.night.vigilanteSelected = this.state.selectedPlayer;\n                            } else if (this.props.parent.state.nightCurrentState == NIGHT_ROUND.Veteran) {\n                                if (currentRoundPlayers.length > 0) {\n                                    if (!this.state.veteranButton || this.props.parent.state.night.veteranSelected === undefined) {\n                                        return alert(\"Selecteaza DA sau NU\");\n                                    }\n    \n                                    if (this.props.parent.state.night.veteranSelected) {\n                                        if (this.props.parent.state.night.policeSelected == this.props.parent.state.night.veteranSelected && this.getRoleAlive(NIGHT_ROUND.Police).length > 1 && !this.props.parent.state.night.policeVeteranSelected) {\n                                            return alert(\"Selecteaza un politist\");\n                                        }\n    \n                                        if (this.props.parent.state.night.doctorSelected == this.props.parent.state.night.veteranSelected && this.getRoleAlive(NIGHT_ROUND.Doctor).length > 1 && !this.props.parent.state.night.doctorVeteranSelected) {\n                                            return alert(\"Selecteaza un doctor\");\n                                        }\n    \n                                        console.log(\"police\", this.props.parent.state.night.policeVeteranSelected);\n                                    }\n                                }\n                            } else if (this.props.parent.state.nightCurrentState == NIGHT_ROUND.Doctor) {\n                                if (currentRoundPlayers.length > 0 && this.state.selectedPlayer == null && this.state.auxSelected == null) {\n                                    return alert(\"Selecteaza un jucator\");\n                                }\n\n                                this.props.parent.state.night.doctorSelected = this.state.selectedPlayer || this.state.auxSelected;\n                            } else if (this.props.parent.state.nightCurrentState == NIGHT_ROUND.Clown) {\n                                if (this.state.selectedPlayer == null) {\n                                    return alert(\"Selecteaza un jucator\");\n                                }\n\n                                this.props.parent.state.night.clownSelected = this.state.selectedPlayer;\n                                this.state.vampireMode = false;\n                                console.log(\"CLOOOWN\");\n                            }\n\n                            this.resetBetweenRounds();\n\n                            ++this.props.parent.state.nightCurrentOrderIndex;\n\n                            if (this.props.parent.state.nightCurrentOrderIndex >= this.props.parent.state.nightOrder.length) {\n                                if (this.state.vampireMode) {\n                                    this.prepareForNextNight(true);\n                                } else {\n                                    this.calculateNight();\n                                    this.props.parent.state.lastNight = Object.assign({}, this.props.parent.state.night);\n                                    this.props.parent.state.isNight = false;\n\n                                    this.props.parent.createHash();\n                                }\n                            } else {\n                                this.prepareForNextNight();\n                            }\n                            \n                            this.props.parent.setState(this.props.parent.state, () => { window.scrollTo(0,0); });\n                        }}\n                    >\n                        Urmatorul\n                    </button>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        return this.props.parent.state.isNight ? this.renderNight() : this.renderDay();\n    }\n}\n\nclass GeneratorPage extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        <div id=\"generatorPage\" className=\"main\">\n            <h2>Generator</h2>\n            <div id=\"presetCnt\">\n                <div id=\"presetSelectCnt\">\n                    <span>Preset:</span>\n                </div>\n            </div>\n        </div>\n    }\n};\n\nclass MainPage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            gameStep: GAME_STEP.WELCOME,\n            gameSettings: Object.assign({}, DEFAULT_GAME_SETTINGS),\n\n            players: [],\n            nightOrder: DEFAULT_ROUNDS_ORDER.slice(),\n\n            dayNumber: 1,\n            isNight: false,\n\n            nightCurrentState: null,\n            nightCurrentOrderIndex: 0,\n            night: null,\n            lastNight: null\n        };\n\n        this.createHash = this.createHash.bind(this);\n    }\n\n    componentDidMount() {\n        window.packCompresser = window.JsonUrl('pack'); // JsonUrl is added to the window object\n\n        if (window.location.hash) {\n            window.packCompresser.decompress(window.location.hash)\n                .then(json => { \n                    Object.assign(this.state, json);\n\n                    this.state.lastNight = Object.assign({}, this.state.night);\n\n                    this.state.gameStep = GAME_STEP.NIGHT;\n                    this.setState(this.state);\n                });\n        }\n    }\n\n    createHash() {\n        window.packCompresser.compress(\n            { \n                players: this.state.players, \n                night: this.state.night,\n                dayNumber: this.state.dayNumber\n            }\n        ).then(output => window.location.hash = output);\n    }\n\n    render() {\n        let displayBlock = null;\n        if (this.state.gameStep == GAME_STEP.WELCOME) displayBlock = <WelcomePage parent={this}/>\n        else if (this.state.gameStep == GAME_STEP.GAME_SETUP) displayBlock = <GameSetupPage parent={this}/>\n        else if (this.state.gameStep == GAME_STEP.PLAYERS_SETUP) displayBlock = <PlayersSetupPage parent={this}/>\n        else if (this.state.gameStep == GAME_STEP.NIGHT) displayBlock = <NightPage parent={this}/>\n        else if (this.state.gameStep == GAME_STEP.GENERATOR) displayBlock = <GeneratorPage parent={this}/>\n\n        return displayBlock;\n    }\n};\n\nReactDOM.render(\n    <MainPage/>,\n    document.getElementById('root')\n);"]}