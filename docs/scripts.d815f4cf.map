{"version":3,"sources":["scripts/index.js"],"names":["GAME_STEP","PLAYER_ROLES","roleIsInnocent","role","NIGHT_ROUND","round","Mafia","Serialkiller","Vigilante","Veteran","Police","Doctor","Clown","Town","ROUND_ACTION","DEFAULT_ROUNDS_ORDER","DEFAULT_PLAYER","DEFAULT_GAME_SETTINGS","createHashFromPlayers","players","hash","i","length","name","id","alive","WelcomePage","React","Component","props","parent","state","gameStep","GAME_SETUP","setState","GameSetupPage","nightOrder","map","_toText2","PLAYERS_SETUP","PlayersSetupPage","window","debugMode","timesUsedBullet","timesSavedHimself","e","target","select","value","parseInt","Object","assign","player","index","keys","text","NIGHT","log","NightPage","calculateNight","bind","renderPlayer","renderDay","renderNight","renderSelectable","renderVeteran","wasProtectedByDoctor","wasSelfDefence","isGuilty","getRoleIndex","getNameIndex","getRoleAlive","countSpecial","resetBetweenRounds","prepareForNextNight","getResultMessage","createHash","night","doctorSelected","veteranSelected","includes","filter","_roleIsForThisRound","special","count","selectedPlayer","auxSelected","auxUnique","auxActivated","veteranButton","vampireMode","nightCurrentState","nightCurrentOrderIndex","veteranKills","veteranUsedTheBullet","townSelected","action","KILLED_IN_NIGHT","mafiaSelected","push","SELF_DEFENCE","SAVED_BY_DOCTOR","NOTHING","serialkillerSelected","selectedPlayerRole","vigilanteSelected","clownSelected","policeSelected","policeVeteranSelected","police","GUILTY","INNOCENT","doctorVeteranSelected","settings","onClick","className","result","_toText","message","__html","person","roundName","_result","dayNumber","index2","isNight","scrollTo","title","subtitle","sort","player1","player2","playersLength","currentRoundPlayers","_toRoundText","lastNight","alert","undefined","GeneratorPage","MainPage","WELCOME","slice","packCompresser","JsonUrl","location","decompress","then","json","compress","output","displayBlock","GENERATOR","ReactDOM","render","document","getElementById"],"mappings":"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","file":"scripts.d815f4cf.map","sourceRoot":"..","sourcesContent":["const GAME_STEP = {\n    WELCOME: 0,\n    GAME_SETUP: 2,\n    PLAYERS_SETUP: 3,\n    NIGHT: 4,\n\n    GENERATOR: 99\n}\n\nconst PLAYER_ROLES = {\n    Mafia: {\n        text: \"Mafiot\",\n        id: 0\n    },\n    Godfather: {\n        text: \"Godfather\",\n        id: 1\n    },\n    Serialkiller: {\n        text: \"Serial killer\",\n        id: 2\n    },\n    Veteran: {\n        text: \"Veteran\",\n        id: 3\n    },\n    Vigilante: {\n        text: \"Vigilentul\",\n        id: 4\n    },\n    Policeman: {\n        text: \"Politist\",\n        id: 5\n    },\n    Doctor: {\n        text: \"Medic\",\n        id: 6\n    },\n    Mayor: {\n        text: \"Primar\",\n        id: 7\n    },\n    Clown: {\n        text: \"Mascarici\",\n        id: 8\n    },\n    Citizen: {\n        text: \"Cetatean\",\n        id: 9\n    }\n};\n\nfunction roleIsInnocent(role) {\n    return !(role == \"Mafia\" || role == \"Serialkiller\");\n}\n\nconst NIGHT_ROUND = {\n    Mafia: 0,\n    Serialkiller: 1,\n    Vigilante: 2,\n    Veteran: 3,\n    Police: 4,\n    Doctor: 5,\n    Clown: 6,\n    Town: 7,\n\n    _toText: (round) => {\n        switch (round) {\n            case NIGHT_ROUND.Mafia: return \"Mafia\";\n            case NIGHT_ROUND.Serialkiller: return \"Serialkillerului\";\n            case NIGHT_ROUND.Vigilante: return \"Vigilentului\";\n            case NIGHT_ROUND.Veteran: return \"Veteranului\";\n            case NIGHT_ROUND.Police: return \"Politistii\";\n            case NIGHT_ROUND.Doctor: return \"Doctorii\";\n            case NIGHT_ROUND.Clown: return \"Mascariciului\";\n            case NIGHT_ROUND.Town: return \"Orasul\";\n        }\n\n        return \"Error\";\n    },\n\n    _toText2: (round) => {\n        switch (round) {\n            case NIGHT_ROUND.Mafia: return \"Mafia\";\n            case NIGHT_ROUND.Serialkiller: return \"Serialkillerul\";\n            case NIGHT_ROUND.Vigilante: return \"Vigilentul\";\n            case NIGHT_ROUND.Veteran: return \"Veteranul\";\n            case NIGHT_ROUND.Police: return \"Politistii\";\n            case NIGHT_ROUND.Doctor: return \"Doctorii\";\n            case NIGHT_ROUND.Clown: return \"Mascariciul\";\n            case NIGHT_ROUND.Town: return \"Orasul\";\n        }\n\n        return \"Error\";\n    },\n\n    _toRoundText: (round) => {\n        switch (round) {\n            case NIGHT_ROUND.Mafia: return \"Runda mafiotilor\";\n            case NIGHT_ROUND.Serialkiller: return \"Runda serialkillerului\";\n            case NIGHT_ROUND.Vigilante: return \"Runda vigilentului\";\n            case NIGHT_ROUND.Veteran: return \"Runda veteranului\";\n            case NIGHT_ROUND.Police: return \"Runda politistilor\";\n            case NIGHT_ROUND.Doctor: return \"Runda doctorilor\";\n            case NIGHT_ROUND.Clown: return \"Runda mascariciului\";\n        }\n\n        return \"Error\";\n    },\n\n    _roleIsForThisRound: (round, role) => {\n        switch (round) {\n            case NIGHT_ROUND.Mafia: return role == \"Mafia\" || role == \"Godfather\";\n            case NIGHT_ROUND.Serialkiller: return role == \"Serialkiller\";\n            case NIGHT_ROUND.Vigilante: return role == \"Vigilante\";\n            case NIGHT_ROUND.Veteran: return role == \"Veteran\";\n            case NIGHT_ROUND.Police: return role == \"Policeman\";\n            case NIGHT_ROUND.Doctor: return role == \"Doctor\";\n            case NIGHT_ROUND.Clown: return role == \"Clown\";\n        }\n\n        return false;\n    }\n};\n\nconst ROUND_ACTION = {\n    SAVED_BY_DOCTOR: 0,\n    KILLED_IN_NIGHT: 1,\n    LYNCHED: 2,\n    SELF_DEFENCE: 3,\n    GUILTY: 4,\n    INNOCENT: 5,\n    NOTHING: 6\n}\n\nconst DEFAULT_ROUNDS_ORDER = [ \n    NIGHT_ROUND.Mafia, \n    NIGHT_ROUND.Serialkiller, \n    NIGHT_ROUND.Police, \n    NIGHT_ROUND.Vigilante,\n    NIGHT_ROUND.Doctor,\n    NIGHT_ROUND.Veteran\n];\n\nconst DEFAULT_PLAYER = {\n    name: \"\",\n    role: \"Citizen\",\n    alive: true\n};\n\nconst DEFAULT_GAME_SETTINGS = {\n\n};\n\nfunction createHashFromPlayers(players) {\n    let hash = \"\";\n    for (let i=0, length=players.length; i < length; ++i) {\n        hash += players[i].name + \"|\" + PLAYER_ROLES[players[i].role].id + \"|\" + (players[i].alive ? \"1\" : \"0\") + \"&\";\n    }\n\n    return hash;\n}\n\nclass WelcomePage extends React.Component {\n    render() {\n        return (\n            <div id=\"welcomePage\" className=\"main\">\n                <h1>Mafia Storyteller Helper</h1>\n                <h2>Created by Aykelith@NiAl</h2>\n                <button \n                    id=\"startBtn\"\n                    onClick={() => {\n                        this.props.parent.state.gameStep = GAME_STEP.GAME_SETUP;\n                        this.props.parent.setState(this.props.parent.state);\n                    }}\n                >\n                    Start\n                </button>\n                <button\n                    id=\"generatorBtn\"\n                    onClick={() => {\n\n                    }}\n                >\n                    Generator\n                </button>\n            </div>\n        );\n    }\n};\n\nclass GameSetupPage extends React.Component {\n    render() {\n        return (\n            <div id=\"gameSetupPage\" className=\"main\">\n                <h2>Game Setup</h2>\n                <div className=\"block\">\n                    <div>Ordinea noptilor:</div>\n                    <div id=\"nightsOrderCnt\">\n                        {\n                            this.props.parent.state.nightOrder.map(round => {\n                                return (\n                                    <div key={`round${round}`}>\n                                        <span>{NIGHT_ROUND._toText2(round)}</span>\n                                        <div>\n                                            \n                                        </div>\n                                    </div>\n                                )\n                            })\n                        }\n                    </div>\n                </div>\n                <button\n                    onClick={() => {\n                        this.props.parent.state.gameStep = GAME_STEP.PLAYERS_SETUP;\n                        this.props.parent.setState(this.props.parent.state);\n                    }}\n                >\n                    Urmatorul\n                </button>\n            </div>\n        )\n    }\n}\n\nclass PlayersSetupPage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        if (window.debugMode) {\n            this.props.parent.state.players = [\n                { name: \"Mafia 1\", role: \"Mafia\", alive: true },\n                { name: \"Mafia 2\", role: \"Mafia\", alive: true },\n                { name: \"Godfather\", role: \"Godfather\", alive: true },\n                { name: \"Policeman\", role: \"Policeman\", alive: true },\n                { name: \"Policeman 2\", role: \"Policeman\", alive: true },\n                { name: \"Veteran\", role: \"Veteran\", alive: true, timesUsedBullet: 0 },\n                { name: \"Vigilante\", role: \"Vigilante\", alive: true },\n                { name: \"Doctor\", role: \"Doctor\", alive: true, timesSavedHimself: 0 },\n                { name: \"Mayor\", role: \"Mayor\", alive: true },\n                { name: \"Clown\", role: \"Clown\", alive: true },\n                { name: \"Serialkiller\", role: \"Serialkiller\", alive: true }\n            ]\n        }\n    }\n    \n    render() {\n        return (\n            <div id=\"playersSetupPage\" className=\"main\">\n                <h2>Players setup</h2>\n                <div>\n                    <span>Numarul de jucatori: </span>\n                    <input\n                        type=\"number\"\n                        value={this.props.parent.state.players.length}\n                        onClick={e => e.target.select()}\n                        onChange={e => {\n                            const value = parseInt(e.target.value);\n\n                            if (value == 0) {\n                                this.props.parent.state.players = [];\n                                return;\n                            }\n\n                            this.props.parent.state.players.length = value;\n\n                            for (let i=0, length = this.props.parent.state.players.length; i < length; ++i) {\n                                if (!this.props.parent.state.players[i]) {\n                                    this.props.parent.state.players[i] = Object.assign({}, DEFAULT_PLAYER);\n                                }\n                            }\n\n                            this.props.parent.setState(this.props.parent.state);\n                        }}\n                    />\n                </div>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Nr</th>\n                            <th>Nume</th>\n                            <th>Rol</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.props.parent.state.players.map((player, index) => {\n                                return (\n                                    <tr key={`player${index}`}>\n                                        <td>{index}</td>\n                                        <td>\n                                            <input\n                                                type=\"text\"\n                                                value={player.name}\n                                                onChange={e => {\n                                                    this.props.parent.state.players[index].name = e.target.value;\n                                                    this.props.parent.setState(this.props.parent.state);\n                                                }}\n                                            />\n                                        </td>\n                                        <td>\n                                            <select\n                                                value={player.role}\n                                                onChange={e => {\n                                                    this.props.parent.state.players[index].role = e.target.value;\n\n                                                    if (e.target.value == \"Doctor\") {\n                                                        this.props.parent.state.players[index].timesSavedHimself = 0;\n                                                    }\n\n                                                    if (e.target.value == \"Veteran\") {\n                                                        this.props.parent.state.players[index].timesUsedBullet = 0;\n                                                    }\n\n                                                    this.props.parent.setState(this.props.parent.state);\n                                                }}\n                                            >\n                                                {\n                                                    Object.keys(PLAYER_ROLES).map(role => {\n                                                        return <option key={role} value={role}>{PLAYER_ROLES[role].text}</option>;\n                                                    })\n                                                }\n                                            </select>\n                                        </td>\n                                        <td></td>\n                                    </tr>\n                                );\n                            })\n                        }\n                    </tbody>\n                </table>\n                <button\n                    onClick={() => {\n                        this.props.parent.state.gameStep = GAME_STEP.NIGHT;\n                        console.log(this.props.parent.state.players);\n                        this.props.parent.setState(this.props.parent.state);\n                    }}\n                >\n                    Incepe jocul\n                </button>\n            </div>\n        )\n    }\n}\n\nclass NightPage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n\n        this.calculateNight = this.calculateNight.bind(this);\n\n        this.renderPlayer = this.renderPlayer.bind(this);\n\n        this.renderDay = this.renderDay.bind(this);\n        this.renderNight = this.renderNight.bind(this);\n\n        this.renderSelectable = this.renderSelectable.bind(this);\n        this.renderVeteran = this.renderVeteran.bind(this);\n\n        this.wasProtectedByDoctor = this.wasProtectedByDoctor.bind(this);\n        this.wasSelfDefence = this.wasSelfDefence.bind(this);\n        this.isGuilty = this.isGuilty.bind(this);\n        this.getRoleIndex = this.getRoleIndex.bind(this);\n        this.getNameIndex = this.getNameIndex.bind(this);\n        this.getRoleAlive = this.getRoleAlive.bind(this);\n        this.countSpecial = this.countSpecial.bind(this);\n\n        this.resetBetweenRounds = this.resetBetweenRounds.bind(this);\n        this.prepareForNextNight = this.prepareForNextNight.bind(this);\n        \n        this.getResultMessage = this.getResultMessage.bind(this);\n    }\n\n    componentDidMount() {\n        this.props.parent.createHash();\n    }\n\n    wasProtectedByDoctor(index) { return this.props.parent.state.night.doctorSelected == index; }\n    wasSelfDefence(index) { return this.props.parent.state.night.veteranSelected == index };\n    isGuilty(index) { return ['Mafia', 'Serialkiller'].includes(this.props.parent.state.players[index].role); }\n    getRoleIndex(role) { \n        for (let i=0, length=this.props.parent.state.players.length; i < length; ++i) {\n            if (this.props.parent.state.players[i].role == role && this.props.parent.state.players[i].alive) return i;\n        } \n\n        return null;\n    }\n    getRoleAlive(role) {\n        return this.props.parent.state.players\n            .filter(player => NIGHT_ROUND._roleIsForThisRound(role, player.role) && player.alive);\n    }\n    getNameIndex(name) {\n        for (let i=0, length=this.props.parent.state.players.length; i < length; ++i) {\n            if (this.props.parent.state.players[i].name == name) return i;\n        } \n\n        return null;\n    }\n    countSpecial(special) {\n        let count = 0;\n        for (let i=0, length=this.props.parent.state.players.length; i < length; ++i) {\n            if (this.props.parent.state.players[i][special]) count += this.props.parent.state.players[i][special];\n        } \n\n        return count;\n    }\n\n    resetBetweenRounds() {\n        this.state.selectedPlayer = null;\n        this.state.auxSelected = null;\n        this.state.auxUnique = false;\n        this.state.auxActivated = false;\n        this.state.veteranButton = null;\n    }\n\n    prepareForNextNight(vampireMode) {\n        this.props.parent.state.nightCurrentState = vampireMode ? NIGHT_ROUND.Clown : this.props.parent.state.nightOrder[this.props.parent.state.nightCurrentOrderIndex];\n\n        if (this.props.parent.state.nightCurrentState == NIGHT_ROUND.Doctor) {\n            this.state.auxActivated = true;\n            this.state.auxUnique = true;\n        }\n    }\n\n    calculateNight() {\n        let night = this.props.parent.state.night;\n        night.veteranKills = [];\n\n        let veteranUsedTheBullet = false;\n\n        console.log(\"NIGHT\", night);\n\n        if (night.townSelected != null) {\n            console.log(\"TOWN\", night.townSelected, this.props.parent.state.players[night.townSelected]);\n            night.townSelected = { id: night.townSelected, action: ROUND_ACTION.KILLED_IN_NIGHT };\n        }\n\n        if (night.mafiaSelected != null) {\n            console.log(\"MAFIA\", night.mafiaSelected, this.props.parent.state.players[night.mafiaSelected]);\n            let action;\n            if (this.wasSelfDefence(night.mafiaSelected)) {\n                console.log(\"   \", \"WAS SELF DEFENCE\", veteranUsedTheBullet);\n                if (!veteranUsedTheBullet) {\n                    ++this.props.parent.state.players[night.mafiaSelected].timesUsedBullet;\n                    veteranUsedTheBullet = true;\n                }\n\n                let id = this.getRoleIndex('Godfather');\n                night.veteranKills.push(id);\n\n                this.props.parent.state.players[id].alive = false;\n\n                action = ROUND_ACTION.SELF_DEFENCE;\n            } else if (this.wasProtectedByDoctor(night.mafiaSelected)) {\n                console.log(\"   \", \"WAS PROTECTED BY DOCTOR\");\n                action = ROUND_ACTION.SAVED_BY_DOCTOR;\n            } else {\n                let selectedPlayerRole = this.props.parent.state.players[night.mafiaSelected].role;\n\n                if (selectedPlayerRole == \"Serialkiller\") {\n                    action = ROUND_ACTION.NOTHING;\n                } else {\n                    this.props.parent.state.players[night.mafiaSelected].alive = false;\n                    action = ROUND_ACTION.KILLED_IN_NIGHT;\n                }\n            }\n\n            night.mafiaSelected = { id: night.mafiaSelected, action: action };\n        }\n        \n        if (night.serialkillerSelected != null) {\n            console.log(\"SERIALKILLER\", night.serialkillerSelected, this.props.parent.state.players[night.serialkillerSelected]);\n\n            let action;\n            if (this.wasSelfDefence(night.serialkillerSelected)) {\n                console.log(\"   \", \"WAS SELF DEFENCE\", veteranUsedTheBullet);\n                if (!veteranUsedTheBullet) {\n                    ++this.props.parent.state.players[night.serialkillerSelected].timesUsedBullet;\n                    veteranUsedTheBullet = true;\n                }\n\n                let id = this.getRoleIndex('Serialkiller');\n                night.veteranKills.push(id);\n\n                this.props.parent.state.players[id].alive = false;\n\n                action = ROUND_ACTION.SELF_DEFENCE;\n            } else if (this.wasProtectedByDoctor(night.serialkillerSelected)) {\n                console.log(\"   \", \"WAS PROTECTED BY DOCTOR\");\n                action = ROUND_ACTION.SAVED_BY_DOCTOR;\n            } else {\n                let selectedPlayerRole = this.props.parent.state.players[night.serialkillerSelected].role;\n\n                if (selectedPlayerRole == \"Mafia\" || selectedPlayerRole == \"Godfather\") {\n                    action = ROUND_ACTION.NOTHING;\n                } else {\n                    this.props.parent.state.players[night.serialkillerSelected].alive = false;\n                    action = ROUND_ACTION.KILLED_IN_NIGHT;\n                }\n            }\n\n            night.serialkillerSelected = { id: night.serialkillerSelected, action: action };\n        }\n        \n        if (night.vigilanteSelected != null) {\n            console.log(\"VIGILANTE\", night.vigilanteSelected, this.props.parent.state.players[night.vigilanteSelected]);\n\n            let action;\n            if (this.wasSelfDefence(night.vigilanteSelected)) {\n                console.log(\"   \", \"WAS SELF DEFENCE\", veteranUsedTheBullet);\n                if (!veteranUsedTheBullet) {\n                    ++this.props.parent.state.players[night.vigilanteSelected].timesUsedBullet;\n                    veteranUsedTheBullet = true;\n                }\n\n                let id = this.getRoleIndex('Vigilante');\n                night.veteranKills.push(id);\n\n                this.props.parent.state.players[id].alive = false;\n                \n                action = ROUND_ACTION.SELF_DEFENCE;\n            } else if (this.wasProtectedByDoctor(night.vigilanteSelected)) {\n                console.log(\"   \", \"WAS PROTECTED BY DOCTOR\");\n                action = ROUND_ACTION.SAVED_BY_DOCTOR;\n            } else {\n                this.props.parent.state.players[night.vigilanteSelected].alive = false;\n                action = ROUND_ACTION.KILLED_IN_NIGHT;\n            }\n\n            night.vigilanteSelected = { id: night.vigilanteSelected, action: action };\n        }\n\n        if (night.clownSelected != null) {\n            console.log(\"CLOWN POWER\");\n            night.clownSelected = { id: night.clownSelected, action: ROUND_ACTION.KILLED_IN_NIGHT };\n        }\n\n        if (night.policeSelected != null) {\n            console.log(\"POLICE\", night.policeSelected, this.props.parent.state.players[night.policeSelected]);\n\n            let action;\n            if (this.wasSelfDefence(night.policeSelected)) {\n                console.log(\"   \", \"WAS SELF DEFENCE\", veteranUsedTheBullet, night.policeVeteranSelected, this.props.parent.state.players[night.policeVeteranSelected]);\n                if (!veteranUsedTheBullet) {\n                    ++this.props.parent.state.players[night.policeSelected].timesUsedBullet;\n                    veteranUsedTheBullet = true;\n                }\n\n                this.props.parent.state.players[night.policeVeteranSelected].alive = false;\n                action = ROUND_ACTION.SELF_DEFENCE;\n            } else {\n                action = 999;\n            }\n\n            night.policeSelected = { id: night.policeSelected, police: this.isGuilty(night.policeSelected) ? ROUND_ACTION.GUILTY : ROUND_ACTION.INNOCENT, action: action };\n        }\n        \n        if (night.doctorSelected != null) {\n            console.log(\"DOCTOR\", night.doctorSelected, this.props.parent.state.players[night.doctorSelected]);\n            if (this.wasSelfDefence(night.doctorSelected)) {\n                if (!night.doctorVeteranSelected) night.doctorVeteranSelected = this.getRoleIndex(\"Doctor\");\n\n                console.log(\"   \", \"WAS SELF DEFENCE\", veteranUsedTheBullet, night.doctorVeteranSelected, this.props.parent.state.players[night.doctorVeteranSelected]);\n                if (!veteranUsedTheBullet) {\n                    ++this.props.parent.state.players[night.doctorSelected].timesUsedBullet;\n                    veteranUsedTheBullet = true;\n                }\n\n                this.props.parent.state.players[night.doctorVeteranSelected].alive = false;\n            } else if (this.props.parent.state.players[night.doctorSelected].role == \"Doctor\") {\n                ++this.props.parent.state.players[night.doctorSelected].timesSavedHimself;\n            }\n\n            night.doctorSelected = { id: night.doctorSelected };\n        }\n\n        if (night.veteranSelected != null && !veteranUsedTheBullet) {\n            ++this.props.parent.state.players[night.veteranSelected].timesUsedBullet;\n            veteranUsedTheBullet = true;\n        }\n    }\n\n    renderPlayer(player, settings) {\n        return (\n            <div onClick={settings.onClick} className={`${player.role} ${settings.className || \"\"}`}>\n                <div>{player.name} {window.debugMode && <span>({this.getNameIndex(player.name)})</span>}</div>\n                <div>{settings.role ? settings.role(player) : PLAYER_ROLES[player.role].text}</div>\n            </div>\n        )\n    }\n\n    getResultMessage(round, result, className) {\n        console.log(NIGHT_ROUND._toText(round), result);\n        if (result == null) {\n            if (round == NIGHT_ROUND.Town) {\n                return <div><span>Orasul a decis sa nu omoare pe nimeni</span></div>\n            }\n    \n            if (round == NIGHT_ROUND.Vigilante) {\n                return <div className={className}><span>Vigilentul a ales sa nu omoare</span></div>\n            }\n\n            if (round == NIGHT_ROUND.Veteran) {\n                return <div className={className}><span>Veteranul a ales sa nu-si foloseasca glontul</span></div>\n            }\n\n            return null;\n        }\n\n        if (round == NIGHT_ROUND.Veteran) {\n            let message = \"Veteranul si-a folosit glontul si-a omorat pe: \";\n\n            let count = this.props.parent.state.night.veteranKills.length;\n            for (let i=0, length=this.props.parent.state.night.veteranKills.length; i < length; ++i) {\n                message += `<b>${this.props.parent.state.players[this.props.parent.state.night.veteranKills[i]].name}(${PLAYER_ROLES[this.props.parent.state.players[this.props.parent.state.night.veteranKills[i]].role].text})</b>,`;\n            }\n\n            if (this.props.parent.state.night.policeVeteranSelected) {\n                ++count;\n                message += `<b>${this.props.parent.state.players[this.props.parent.state.night.policeVeteranSelected].name}(${PLAYER_ROLES[this.props.parent.state.players[this.props.parent.state.night.policeVeteranSelected].role].text})</b>,`;\n            }\n\n            if (this.props.parent.state.night.doctorVeteranSelected) {\n                ++count;\n                message += `<b>${this.props.parent.state.players[this.props.parent.state.night.doctorVeteranSelected].name}(${PLAYER_ROLES[this.props.parent.state.players[this.props.parent.state.night.doctorVeteranSelected].role].text})</b>,`;\n            }\n\n            return <div className={className}>{ count > 0 ? <span dangerouslySetInnerHTML={{ __html: message }}></span> : \"Veteranul si-a folosit glontul dar nu a omorat pe nimeni!\" }</div>;\n        }\n\n        if (round == NIGHT_ROUND.Doctor) {\n            let person = <b>{this.props.parent.state.players[result.id].name}({PLAYER_ROLES[this.props.parent.state.players[result.id].role].text})</b>;\n\n            for (let roundName in this.props.parent.state.night) {\n                let _result = this.props.parent.state.night[roundName];\n                if (typeof _result == 'object' && _result && _result.action == ROUND_ACTION.SAVED_BY_DOCTOR) {\n                    return <div className={className}><span>Doctorii au salvat pe cine trebuia! ({person})</span></div>;\n                }\n            }\n\n            return <div className={className}><span>Doctorii nu au salvat pe cine trebuia! ({person})</span></div>\n        }\n\n        if (round == NIGHT_ROUND.Police) {\n            return <div className={className}><span>Politistii au ales si a iesit {result.police == ROUND_ACTION.GUILTY ? \"necurat\" : \"curat\"} (<b>{this.props.parent.state.players[result.id].name}({PLAYER_ROLES[this.props.parent.state.players[result.id].role].text})</b>)</span></div>\n        }\n\n        if (result.action == ROUND_ACTION.KILLED_IN_NIGHT) {\n            return <div className={className}><span>{NIGHT_ROUND._toText2(round)} au omorat pe <b>{this.props.parent.state.players[result.id].name}({PLAYER_ROLES[this.props.parent.state.players[result.id].role].text})</b></span></div>;\n        } else if (result.action == ROUND_ACTION.SAVED_BY_DOCTOR || result.action == ROUND_ACTION.SELF_DEFENCE) {\n            return <div className={className}><span>{NIGHT_ROUND._toText2(round)} nu au reusit sa omoare pe nimeni (<b>{this.props.parent.state.players[result.id].name}({PLAYER_ROLES[this.props.parent.state.players[result.id].role].text})</b>)</span></div>;\n        }\n\n        if (result.action == ROUND_ACTION.NOTHING) {\n            return <div className={className}><span>{NIGHT_ROUND._toText2(round)} nu au omorat pe nimeni (<b>{this.props.parent.state.players[result.id].name}({PLAYER_ROLES[this.props.parent.state.players[result.id].role].text})</b>)</span></div>\n        }\n\n        return null;\n    }\n\n    renderDay() {\n        console.log(\"RRR\", this.props.parent.state.night);\n\n        return (\n            <div id=\"nightPage_day\" className=\"main\">\n                <h2 id=\"dayNumber\">Ziua {this.props.parent.state.dayNumber}</h2>\n                {\n                    this.props.parent.state.night\n                    &&\n                    <div className=\"playersStatusCnt\">\n                        <h3>Noaptea trecuta</h3>\n                        { this.getResultMessage(NIGHT_ROUND.Town, this.props.parent.state.night.townSelected) }\n                        { this.getResultMessage(NIGHT_ROUND.Mafia, this.props.parent.state.night.mafiaSelected, \"Mafia\") }\n                        { this.getResultMessage(NIGHT_ROUND.Serialkiller, this.props.parent.state.night.serialkillerSelected, \"Serialkiller\") }\n                        { this.getResultMessage(NIGHT_ROUND.Police, this.props.parent.state.night.policeSelected, \"Policeman\") }\n                        { this.getResultMessage(NIGHT_ROUND.Vigilante, this.props.parent.state.night.vigilanteSelected, \"Vigilante\") }\n                        { this.getResultMessage(NIGHT_ROUND.Doctor, this.props.parent.state.night.doctorSelected, \"Doctor\") }\n                        { this.getResultMessage(NIGHT_ROUND.Veteran, this.props.parent.state.night.veteranSelected, \"Veteran\") }\n                        { this.getResultMessage(NIGHT_ROUND.Clown, this.props.parent.state.night.clownSelected, \"Clown\") }\n                    </div>\n                }\n                <div className=\"playersStatusCnt\">\n                    <h3>Lista jucatori</h3>\n                    <h4>(selecteaza un jucator pentru a-l linsa)</h4>\n                    {\n                        this.props.parent.state.players\n                            .map((player, index) => {\n                            let index2 = this.getNameIndex(player.name);\n\n                            return this.renderPlayer(\n                                player, \n                                {\n                                    className: `${this.state.selectedPlayer == index2 ? \"selected\" : \"\"} ${!player.alive ? \"deleted\" : \"\"}`, \n                                    onClick: () => {\n                                        if (!player.alive) return;\n\n                                        this.state.selectedPlayer = this.state.selectedPlayer == index2 ? null : index2;\n                                        this.setState(this.state);\n                                    }\n                                }\n                            );\n                        })\n                    }\n                </div>\n                <button\n                    id=\"startNightBtn\"\n                    onClick={e => {\n                        this.props.parent.state.night = { townSelected: this.state.selectedPlayer }\n                        if (this.state.selectedPlayer) {\n                            this.props.parent.state.players[this.state.selectedPlayer].alive = false;\n\n                            if (this.props.parent.state.players[this.state.selectedPlayer].role == \"Clown\") {\n                                this.state.vampireMode = true;\n                            }\n                        }\n\n                        this.state.selectedPlayer = null;\n                        this.state.auxSelected = null;\n                        this.state.auxActivated = false;\n                        this.state.auxUnique = false;\n                        this.state.veteranButton = null;\n\n                        this.props.parent.state.isNight = true;\n                        ++this.props.parent.state.dayNumber;\n                        this.props.parent.state.nightCurrentState = this.props.parent.state.nightOrder[0];\n                        this.props.parent.state.nightCurrentOrderIndex = 0;\n\n                        if (this.getRoleIndex(\"Godfather\") == null) {\n                            this.state.auxActivated = true;\n                        }\n\n                        this.props.parent.setState(this.props.parent.state, () => { window.scrollTo(0,0); });\n\n                        console.log(\"PLAYERS\", this.props.parent.state.players);\n                    }}\n                >\n                    Incepe noaptea\n                </button>\n            </div>\n        )\n    }\n\n    renderSelectable(settings) {\n        console.log(\"SETTINGS\", settings);\n        return (\n            <div id=\"mafiaStep\" className=\"nightStep\">\n                <div className=\"playersStatusCnt\">\n                    <h3>{settings.title}</h3>\n                    <h4>{settings.subtitle}</h4>\n                    {\n                        this.props.parent.state.players\n                            .filter(player => !NIGHT_ROUND._roleIsForThisRound(this.props.parent.state.nightCurrentState, player.role) && player.alive)\n                            .sort(settings.filter ? settings.filter : (player1, player2) => player1.role > player2.role)\n                            .map((player, index) => {\n                            let index2 = this.getNameIndex(player.name);\n                            return this.renderPlayer(\n                                player, \n                                Object.assign(\n                                    {\n                                        className: settings.className ? \n                                            `${this.state.selectedPlayer == index2 ? \"selected\" : \"\"} ${settings.className(player, index2)}` : \n                                            this.state.selectedPlayer == index2 && \"selected\", \n                                        onClick: () => {\n                                            if (settings.playersLength == 0) return;\n\n                                            this.state.selectedPlayer = this.state.selectedPlayer == index2 ? null : index2;\n                                            if (this.state.auxUnique) this.state.auxSelected = null;\n                                            this.setState(this.state);\n                                        },\n                                    }, \n                                    settings.player || {}\n                                )\n                            );\n                        })\n                    }\n                </div>\n            </div>\n        )\n    }\n\n    renderVeteran() {\n        return (\n            <div id=\"veteranStep\" className=\"nightStep\">\n                <h3>Vrei sa folosesti glontul?</h3>\n                <div id=\"buttonsCnt\">\n                    <button \n                        className={this.state.veteranButton == 1 && 'selected'}\n                        onClick={() => {\n                            this.props.parent.state.night.veteranSelected = this.getRoleIndex('Veteran');\n                            this.state.veteranButton = 1;\n                            this.setState(this.state);\n                        }}\n                    >\n                        Da\n                    </button>\n                    <button \n                        className={this.state.veteranButton == 2 && 'selected'}\n                        onClick={() => {\n                            this.props.parent.state.night.veteranSelected = null;\n                            this.state.veteranButton = 2;\n                            this.setState(this.state);\n                        }}\n                    >\n                        Nu\n                    </button>\n                </div>\n                {\n                    this.props.parent.state.night.veteranSelected\n                    &&\n                    this.props.parent.state.night.policeSelected == this.props.parent.state.night.veteranSelected\n                    && \n                    this.getRoleAlive(NIGHT_ROUND.Police).length > 1\n                    &&\n                    <div className=\"playersStatusCnt\">\n                        <h3>Lista politisti</h3>\n                        <h4>(selecteaza un politist pentru a-l omori)</h4>\n                        {\n                            this.getRoleAlive(NIGHT_ROUND.Police).map((player, index) => {\n                                let index2 = this.getNameIndex(player.name);\n                                return this.renderPlayer(player, \n                                    {\n                                        className: this.props.parent.state.night.policeVeteranSelected == index2 && \"selected\", \n                                        onClick: () => {\n                                            this.props.parent.state.night.policeVeteranSelected = this.props.parent.state.night.policeVeteranSelected == index2 ? null : index2;\n                                            this.props.parent.setState(this.props.parent.state);\n                                        }\n                                    }\n                                );\n                            })\n                        }\n                    </div>\n                }\n                {\n                    this.props.parent.state.night.veteranSelected\n                    &&\n                    this.props.parent.state.night.doctorSelected == this.props.parent.state.night.veteranSelected\n                    && \n                    this.getRoleAlive(NIGHT_ROUND.Doctor).length > 1\n                    &&\n                    <div className=\"playersStatusCnt\">\n                        <h3>Lista doctori</h3>\n                        <h4>(selecteaza un doctor pentru a-l omori)</h4>\n                        {\n                            this.getRoleAlive(NIGHT_ROUND.Doctor).map((player, index) => {\n                                let index2 = this.getNameIndex(player.name);\n                                return this.renderPlayer(player, this.props.parent.state.night.doctorVeteranSelected == index2 && \"selected\", () => {\n                                    this.props.parent.state.night.doctorVeteranSelected = this.props.parent.state.night.doctorVeteranSelected == index2 ? null : index2;\n                                    this.props.parent.setState(this.props.parent.state);\n                                });\n                            })\n                        }\n                    </div>\n                }\n            </div>\n        )\n    }\n\n    renderNight() {\n        let currentRoundPlayers = this.props.parent.state.players\n            .filter(player => NIGHT_ROUND._roleIsForThisRound(this.props.parent.state.nightCurrentState, player.role) && player.alive)\n            .sort((player1, player2) => player1.role > player2.role);\n            \n        return (\n            <div id=\"nightPage_night\" className=\"main\">\n                <h1>{NIGHT_ROUND._toRoundText(this.props.parent.state.nightCurrentState)}</h1>\n                {\n                    this.props.parent.state.nightCurrentState == NIGHT_ROUND.Doctor\n                    &&\n                    <div className=\"specialCnt\">Medicii s-or salvat pe ei de {this.countSpecial(\"timesSavedHimself\")} ori</div>\n                }\n                {\n                    this.props.parent.state.nightCurrentState == NIGHT_ROUND.Veteran\n                    &&\n                    <div className=\"specialCnt\">Veteranul o folosit glontul de {this.countSpecial(\"timesUsedBullet\")} ori</div>\n                }\n                <div className=\"playersStatusCnt\">\n                    <h3>Lista jucatori</h3>\n                    {\n                        currentRoundPlayers.map((player, index) => {\n                            let index2 = this.getNameIndex(player.name);\n                            return this.renderPlayer(player, \n                                {\n                                    className: this.state.auxActivated && this.state.auxSelected == index2 && \"selected\", \n                                    onClick: () => {\n                                        this.state.auxSelected = this.state.auxSelected == index2 ? null : index2;\n                                        if (this.state.auxUnique) this.state.selectedPlayer = null;\n                                        this.setState(this.state);\n                                    }\n                                }\n                            );\n                        })\n                    }\n                </div>\n                {\n                    this.props.parent.state.nightCurrentState == NIGHT_ROUND.Mafia\n                    &&\n                    this.renderSelectable({ title: \"Posibile victime\", subtitle: \"(selecteaza o victima)\", playersLength: currentRoundPlayers.length })\n                }\n                {\n                    this.props.parent.state.nightCurrentState == NIGHT_ROUND.Serialkiller\n                    &&\n                    this.renderSelectable({ title: \"Posibile victime\", subtitle: \"(selecteaza o victima)\", playersLength: currentRoundPlayers.length })\n                }\n                {\n                    this.props.parent.state.nightCurrentState == NIGHT_ROUND.Police\n                    &&\n                    this.renderSelectable({ \n                        title: \"Posibili criminali\", \n                        subtitle: \"(selecteaza un jucator)\",\n                        filter: (player1, player2) => roleIsInnocent(player1.role) > roleIsInnocent(player2.role),\n                        className: (player, index) => roleIsInnocent(player.role) ? \"innocent\" : \"guilty\",\n                        player: {\n                            role: (player) => `${roleIsInnocent(player.role) ? \"Inocent\" : \"Vinovant\"} (${PLAYER_ROLES[player.role].text})`\n                        }, \n                        playersLength: currentRoundPlayers.length \n                    })\n                }\n                {\n                    this.props.parent.state.nightCurrentState == NIGHT_ROUND.Vigilante\n                    &&\n                    this.renderSelectable({ title: \"Posibile victime\", subtitle: \"(selecteaza o victima sau nu)\", playersLength: currentRoundPlayers.length })\n                }\n                {\n                    this.props.parent.state.nightCurrentState == NIGHT_ROUND.Doctor\n                    &&\n                    this.renderSelectable({ title: \"Posibile victime\", subtitle: \"(selecteaza o victima sau nu)\", playersLength: currentRoundPlayers.length })\n                }\n                {\n                    this.props.parent.state.nightCurrentState == NIGHT_ROUND.Veteran && currentRoundPlayers.length > 0\n                    &&\n                    this.renderVeteran()\n                }\n                {\n                    this.props.parent.state.nightCurrentState == NIGHT_ROUND.Clown\n                    &&\n                    this.renderSelectable({ title: \"Posibile victime\", subtitle: \"(selecteaza o victima)\", playersLength: 1 })\n                }\n                <div id=\"buttonsCnt\">\n                    <button\n                        id=\"backState\"\n                        onClick={() => {\n                            this.resetBetweenRounds();\n\n                            --this.props.parent.state.nightCurrentOrderIndex;\n                            if (this.props.parent.state.nightCurrentOrderIndex == -1) {\n                                this.props.parent.state.isNight = false;\n                                --this.props.parent.state.dayNumber;\n                                this.props.parent.state.night = Object.assign({}, this.props.parent.state.lastNight);\n                            } else {\n                                this.prepareForNextNight();\n                            }\n\n                            this.props.parent.setState(this.props.parent.state, () => { window.scrollTo(0,0); });\n                        }}\n                    >\n                        Inapoi\n                    </button>\n                    <button \n                        id=\"nextState\"\n                        onClick={() => {\n                            if (this.props.parent.state.nightCurrentState == NIGHT_ROUND.Mafia) {\n                                if (currentRoundPlayers.length > 0 && this.state.selectedPlayer == null) {\n                                    return alert(\"Selecteaza un jucator\");\n                                }\n\n                                if (currentRoundPlayers.length > 0 && this.getRoleIndex(\"Godfather\") == null) {\n                                    if (this.state.auxSelected == null) return alert(\"Selecteaza noul Godfather\");\n                                    else {\n                                        this.props.parent.state.players[this.state.auxSelected].role = \"Godfather\";\n                                    }\n                                }\n\n                                this.props.parent.state.night.mafiaSelected = this.state.selectedPlayer;\n                            } else if (this.props.parent.state.nightCurrentState == NIGHT_ROUND.Serialkiller) {\n                                if (currentRoundPlayers.length > 0 && this.state.selectedPlayer == null) {\n                                    return alert(\"Selecteaza un jucator\");\n                                }\n\n                                this.props.parent.state.night.serialkillerSelected = this.state.selectedPlayer;\n                            } else if (this.props.parent.state.nightCurrentState == NIGHT_ROUND.Police) {\n                                if (currentRoundPlayers.length > 0 && this.state.selectedPlayer == null) {\n                                    return alert(\"Selecteaza un jucator\");\n                                }\n\n                                this.props.parent.state.night.policeSelected = this.state.selectedPlayer;\n                            } else if (this.props.parent.state.nightCurrentState == NIGHT_ROUND.Vigilante) {\n                                this.props.parent.state.night.vigilanteSelected = this.state.selectedPlayer;\n                            } else if (this.props.parent.state.nightCurrentState == NIGHT_ROUND.Veteran) {\n                                if (currentRoundPlayers.length > 0) {\n                                    if (!this.state.veteranButton || this.props.parent.state.night.veteranSelected === undefined) {\n                                        return alert(\"Selecteaza DA sau NU\");\n                                    }\n    \n                                    if (this.props.parent.state.night.veteranSelected) {\n                                        if (this.props.parent.state.night.policeSelected == this.props.parent.state.night.veteranSelected && this.getRoleAlive(NIGHT_ROUND.Police).length > 1 && !this.props.parent.state.night.policeVeteranSelected) {\n                                            return alert(\"Selecteaza un politist\");\n                                        }\n    \n                                        if (this.props.parent.state.night.doctorSelected == this.props.parent.state.night.veteranSelected && this.getRoleAlive(NIGHT_ROUND.Doctor).length > 1 && !this.props.parent.state.night.doctorVeteranSelected) {\n                                            return alert(\"Selecteaza un doctor\");\n                                        }\n    \n                                        console.log(\"police\", this.props.parent.state.night.policeVeteranSelected);\n                                    }\n                                }\n                            } else if (this.props.parent.state.nightCurrentState == NIGHT_ROUND.Doctor) {\n                                if (currentRoundPlayers.length > 0 && this.state.selectedPlayer == null && this.state.auxSelected == null) {\n                                    return alert(\"Selecteaza un jucator\");\n                                }\n\n                                this.props.parent.state.night.doctorSelected = this.state.selectedPlayer || this.state.auxSelected;\n                            } else if (this.props.parent.state.nightCurrentState == NIGHT_ROUND.Clown) {\n                                if (this.state.selectedPlayer == null) {\n                                    return alert(\"Selecteaza un jucator\");\n                                }\n\n                                this.props.parent.state.night.clownSelected = this.state.selectedPlayer;\n                                this.state.vampireMode = false;\n                                console.log(\"CLOOOWN\");\n                            }\n\n                            this.resetBetweenRounds();\n\n                            ++this.props.parent.state.nightCurrentOrderIndex;\n\n                            if (this.props.parent.state.nightCurrentOrderIndex >= this.props.parent.state.nightOrder.length) {\n                                if (this.state.vampireMode) {\n                                    this.prepareForNextNight(true);\n                                } else {\n                                    this.calculateNight();\n                                    this.props.parent.state.lastNight = Object.assign({}, this.props.parent.state.night);\n                                    this.props.parent.state.isNight = false;\n\n                                    this.props.parent.createHash();\n                                }\n                            } else {\n                                this.prepareForNextNight();\n                            }\n                            \n                            this.props.parent.setState(this.props.parent.state, () => { window.scrollTo(0,0); });\n                        }}\n                    >\n                        Urmatorul\n                    </button>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        return this.props.parent.state.isNight ? this.renderNight() : this.renderDay();\n    }\n}\n\nclass GeneratorPage extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        <div id=\"generatorPage\" className=\"main\">\n            <h2>Generator</h2>\n            <div id=\"presetCnt\">\n                <div id=\"presetSelectCnt\">\n                    <span>Preset:</span>\n                </div>\n            </div>\n        </div>\n    }\n};\n\nclass MainPage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            gameStep: GAME_STEP.WELCOME,\n            gameSettings: Object.assign({}, DEFAULT_GAME_SETTINGS),\n\n            players: [],\n            nightOrder: DEFAULT_ROUNDS_ORDER.slice(),\n\n            dayNumber: 1,\n            isNight: false,\n\n            nightCurrentState: null,\n            nightCurrentOrderIndex: 0,\n            night: null,\n            lastNight: null\n        };\n\n        this.createHash = this.createHash.bind(this);\n    }\n\n    componentDidMount() {\n        window.packCompresser = window.JsonUrl('pack'); // JsonUrl is added to the window object\n\n        if (window.location.hash) {\n            window.packCompresser.decompress(window.location.hash)\n                .then(json => { \n                    Object.assign(this.state, json);\n\n                    this.state.lastNight = Object.assign({}, this.state.night);\n\n                    this.state.gameStep = GAME_STEP.NIGHT;\n                    this.setState(this.state);\n                });\n        }\n    }\n\n    createHash() {\n        window.packCompresser.compress(\n            { \n                players: this.state.players, \n                night: this.state.night,\n                dayNumber: this.state.dayNumber\n            }\n        ).then(output => window.location.hash = output);\n    }\n\n    render() {\n        let displayBlock = null;\n        if (this.state.gameStep == GAME_STEP.WELCOME) displayBlock = <WelcomePage parent={this}/>\n        else if (this.state.gameStep == GAME_STEP.GAME_SETUP) displayBlock = <GameSetupPage parent={this}/>\n        else if (this.state.gameStep == GAME_STEP.PLAYERS_SETUP) displayBlock = <PlayersSetupPage parent={this}/>\n        else if (this.state.gameStep == GAME_STEP.NIGHT) displayBlock = <NightPage parent={this}/>\n        else if (this.state.gameStep == GAME_STEP.GENERATOR) displayBlock = <GeneratorPage parent={this}/>\n\n        return displayBlock;\n    }\n};\n\nReactDOM.render(\n    <MainPage/>,\n    document.getElementById('root')\n);"]}